Back to HomePage

'''General Overview'''

This overview is just that - no specific details, just an overview of the path I took to creating the editor.

I started by creating a basic editor plugin using the 'Plugin with an editor' wizard (New Project -> Plug-in Development -> Plug-in project ...) (And then I became quite confused for a while.)

My first goal was to make wiki words appear in colour and I soon realised that the way to do that was with a scanner (com.teaminabox.eclipse.wiki.editors.WikiScanner) and a custom rule (IRule) that would identify a wiki name and return an appropriate org.eclipse.jface.text.rules.IToken that set the color for the scanned region.

Once the rule was in place, returning different tokens for different things (URLs etc) is quite easy. The only tricky thing to bear in mind with the scanner is that if you've scanned forwards too far, you must rewind it! See WikiColouring for more info.

The next step was actions. How do I respond to an accelerator key and open a wiki link?  I found this quite tricky at first because I was trying to create something that would take care of the pop up menu and accelerator keys at the same time. in the end I needed two actions, one for the pop up menu and one for the accelerator. com.teaminabox.eclipse.wiki.actions.OpenWikiLinkEditorAction responds to pop ups com.teaminabox.eclipse.wiki.actions.OpenWikiLinkWorkbenchAction responds to accelerator key actions.

These two could almost certainly be combined into a single class but there were more fun things to do. There is no code attaching the actions to the editor, instead this is achieved through action sets and viewer contributions in the plugins plugin.xml file.

However, I later added support 'F3', the standard way of opening files. See com.teaminabox.eclipse.wiki.editors.WikiEditor createActions()

Once the event to open a Wiki link had been received, the WikiEditor is used to open the link because it knows what directory the currently open document is in. See the method openWikiLinkOnSelection in com.teaminabox.eclipse.wiki.editors.WikiEditor.java Of course, to open a link, you need to ensure that there is a link at the current cursor position. So very similar code to that used for the scanner is required. I don't like duplicating code...

Enter TextRegion com.teaminabox.eclipse.wiki.text.TextRegion ...

TextRegion was introduced as the simplest way to identify the various regions of text (wiki name, url, etc) in a Wiki document. The WikiNameRule and code responding to actions obtains a TextRegion at a given location in the document, and acts according to the type of text region found using a visitor (com.teaminabox.eclipse.wiki.text.TextRegionVisitor). The com.teaminabox.eclipse.wiki.text.TextRegionBuilder has methods for building an appropriate text region given arbitrary text.

Adding new types of links or text to the editor should now be pretty easy.

The next thing I wanted to implement was completion. At first I wanted WikiName completion, but then Eclipse resource completion was definitely a good thing too. To implement completion you need to implement an eclipse org.eclipse.jface.text.contentassist.IContentAssistProcessor, my implementation is com.teaminabox.eclipse.wiki.editors.WikiCompletionProcessor See WikiCompletion for more about this since its quite straightforward.

The last feature I added was HoverSupport which is supported by all editors through the org.eclipse.jface.text.source.SourceViewerConfiguration ... read about it in HoverSupport.

'''But, how does all this hang together?'''
Editors use a org.eclipse.jface.text.source.SourceViewerConfiguration to configure content assist, hover support, scanner etc etc. In the constructor for the WikiEditor, a com.teaminabox.eclipse.wiki.editors.WikiConfiguration instance is set that sets up all the components (com.teaminabox.eclipse.wiki.editors.WikiConfiguration) However, the actions are configured externally in the plugin.xml by using extension points.

Finally, the thing that caused some pain (due to my stupidity more than anything else) was navigating the eclipse workspace because I started from the basic assumption that everything is a file. But of course Eclipse now supports links and may have more exotic resource implementations in the future. Fortunately, Eclipse provides everything you need to find resources in the workspace (although discovering this was more painful than it needed have been - more documentation is required I feel.)

Back to HomePage